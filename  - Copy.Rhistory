autoplot(results, metric = "rmse")
sum(is.na(camels_train$p_mean))
sum(is.na(camels_train$elev_mean))
sum(is.na(camels_train$slope_mean))
sum(is.na(camels_train$aridity))
sum(is.na(camels_train$runoff_ratio))
sum(is.na(camels_train$logQmean))
processed_train_data <- prep(rec, training = camels_train)
processed_train_data <- bake(processed_train_data, new_data = camels_train)
# Check if there are any remaining NAs in the processed data
sum(is.na(processed_train_data))
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
#Combine into workflow set
workflow_set <- workflow_set(
preproc = list("Standard" = rec),
models = list("Random Forest" = workflow_rf,
"Linear Regression" = workflow_lm,
"XGBoost" = workflow_xgb))
#Formula
logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio
#Why this formula?
#I am choosing this formula because each of these factors can have a significant impact on stream flow. For example, rainfall is the primary input of new stream flow within a watershed and aridity mean that stream flow is less likely. Both elevation and slope can contribute to how much runoff there is in an area, ultimately impacting stream flow.
#Recipe
rec <- recipe(logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio,
data = camels_train) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
print
camels_cv <- vfold_cv(camels_train, v = 10)
#Formula
logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio
#Why this formula?
#I am choosing this formula because each of these factors can have a significant impact on stream flow. For example, rainfall is the primary input of new stream flow within a watershed and aridity mean that stream flow is less likely. Both elevation and slope can contribute to how much runoff there is in an area, ultimately impacting stream flow.
#Recipe
rec <- recipe(logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio,
data = camels_train) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
print
camels_cv <- vfold_cv(camels_train, v = 10)
rf_model <- rand_forest(
mode = "regression",
trees = 500,
mtry = 3,
min_n = 10) %>%
set_engine("ranger")
lm_model <- linear_reg() %>%
set_engine("lm")
xgb_model <- boost_tree(
mode = "regression",
trees = 1000,
tree_depth = 6,
learn_rate = 0.1,
min_n = 10) %>%
set_engine("xgboost")
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
#Combine into workflow set
workflow_set <- workflow_set(
preproc = list("Standard" = rec),
models = list("Random Forest" = workflow_rf,
"Linear Regression" = workflow_lm,
"XGBoost" = workflow_xgb))
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
#Combine into workflow set
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model
)
# Define a list of recipes (in this case, only one recipe)
recipes <- list(
"Standard" = rec
)
workflow_set <- workflow_set(
preproc = recipes,
models = models
set.seed(123)
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(
preproc = recipes,
models = models
set.seed(123)
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(
preproc = recipes,
models = models
set.seed(123)
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(
preproc = recipes,
models = models
set.seed(123)  # Ensure there are no syntax issues
set.seed(123)
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(preproc = recipes,
models = models
set.seed(123)
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(preproc = recipes,
models = models
set.seed(123)
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(preproc = recipes,
models = models)
set.seed(123)
results <- workflow_set %>%
workflow_map(resamples = camels_cv,
seed = 123,
metrics = metric_set(rmse, rsq))
autoplot(results, metric = "rmse")
autoplot(results, metric = "rsq")
rank_results(results, metric = "rmse")
autoplot(results, metric = "rmse")
autoplot(results, metric = "rsq")
rank_results <- rank_results(results)
print(ranked_results)
autoplot(results, metric = "rmse")
autoplot(results, metric = "rsq")
ranked_results <- rank_results(results)
print(ranked_results)
print(camels_cv)
set.seed(123)
# Bad form to perform simple transformations on the outcome variable within a
# recipe. So, we'll do it here.
camels <- camels |>
mutate(logQmean = log(q_mean))
# Generate the split
camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)
camels_cv <- vfold_cv(camels_train, v = 10)
#Formula
logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio
#Why this formula?
#I am choosing this formula because each of these factors can have a significant impact on stream flow. For example, rainfall is the primary input of new stream flow within a watershed and aridity mean that stream flow is less likely. Both elevation and slope can contribute to how much runoff there is in an area, ultimately impacting stream flow.
#Recipe
rec <- recipe(logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio,
data = camels_train) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_impute_median(all_numeric(), -all_outcomes()) %>%
#Formula
logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio
#Why this formula?
#I am choosing this formula because each of these factors can have a significant impact on stream flow. For example, rainfall is the primary input of new stream flow within a watershed and aridity mean that stream flow is less likely. Both elevation and slope can contribute to how much runoff there is in an area, ultimately impacting stream flow.
#Recipe
rec <- recipe(logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio,
data = camels_train) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_impute_median(all_numeric(), -all_outcomes())
rf_model <- rand_forest(
mode = "regression",
trees = 500,
mtry = 3,
min_n = 10) %>%
set_engine("ranger")
lm_model <- linear_reg() %>%
set_engine("lm")
xgb_model <- boost_tree(
mode = "regression",
trees = 1000,
tree_depth = 6,
learn_rate = 0.1,
min_n = 10) %>%
set_engine("xgboost")
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(preproc = recipes,
models = models)
set.seed(123)
results <- workflow_set %>%
workflow_map(resamples = camels_cv,
seed = 123,
metrics = metric_set(rmse, rsq))
autoplot(results, metric = "rmse")
autoplot(results, metric = "rsq")
ranked_results <- rank_results(results)
print(ranked_results)
rf_result <- workflow_rf %>% workflow_map(resamples = camels_cv, seed = 123, metrics = metric_set(rmse, rsq))
library(workflows)
library(tune)
library(rsample)
library(yardstick)
#Formula
logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio
#Why this formula?
#I am choosing this formula because each of these factors can have a significant impact on stream flow. For example, rainfall is the primary input of new stream flow within a watershed and aridity mean that stream flow is less likely. Both elevation and slope can contribute to how much runoff there is in an area, ultimately impacting stream flow.
#Recipe
rec <- recipe(logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio,
data = camels_train) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_impute_median(all_numeric(), -all_outcomes())
# Create a 10-fold cross-validation set
camels_cv <- vfold_cv(camels_train, v = 10)
rf_model <- rand_forest(
mode = "regression",
trees = 500,
mtry = 3,
min_n = 10) %>%
set_engine("ranger")
lm_model <- linear_reg() %>%
set_engine("lm")
xgb_model <- boost_tree(
mode = "regression",
trees = 1000,
tree_depth = 6,
learn_rate = 0.1,
min_n = 10) %>%
set_engine("xgboost")
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(preproc = recipes,
models = models)
set.seed(123)
results <- workflow_set %>%
workflow_map(resamples = camels_cv,
seed = 123,
metrics = metric_set(rmse, rsq))
autoplot(results, metric = "rmse")
autoplot(results, metric = "rsq")
ranked_results <- rank_results(results)
print(ranked_results)
rf_result_single <- workflow_rf %>%
workflow_map(
resamples = camels_cv[1],   # Only use the first fold for debugging
seed = 123,
metrics = metric_set(rmse, rsq)
)
sum(is.na(camels_train$logQmean))
sum(is.na(camels_train$p_mean))
sum(is.na(camels_train$elev_mean))
sum(is.na(camels_train$slope_mean))
sum(is.na(camels_train$aridity))
sum(is.na(camels_train$runoff_ratio))
sum(is.infinite(camels_train$logQmean))
sum(is.infinite(camels_train$p_mean))
sum(is.infinite(camels_train$elev_mean))
sum(is.infinite(camels_train$slope_mean))
sum(is.infinite(camels_train$aridity))
sum(is.infinite(camels_train$runoff_ratio))
camels_train_clean <- camels_train %>%
filter(!is.na(logQmean))
sum(is.na(camels_train_clean$logQmean))
#remove NA values
library(dylyr)
#remove NA values
library(dplyr)
camels_train_clean <- camels_train %>%
filter(!is.na(logQmean))
sum(is.na(camels_train_clean$logQmean))
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(preproc = recipes,
models = models)
set.seed(123)
results <- workflow_set %>%
workflow_map(resamples = camels_train_clean,
seed = 123,
metrics = metric_set(rmse, rsq))
autoplot(results, metric = "rmse")
library(workflows)
library(tune)
library(rsample)
library(yardstick)
#remove NA values
library(dplyr)
camels_train_clean <- camels_train %>%
filter(!is.na(logQmean))
sum(is.na(camels_train_clean$logQmean))
set.seed(123)
# Bad form to perform simple transformations on the outcome variable within a
# recipe. So, we'll do it here.
camels <- camels |>
mutate(logQmean = log(q_mean))
# Generate the split
camels_split <- initial_split(camels_train_clean, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)
#Cross validation
camels_cv <- vfold_cv(camels_train, v = 10)
#Formula
logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio
#Why this formula?
#I am choosing this formula because each of these factors can have a significant impact on stream flow. For example, rainfall is the primary input of new stream flow within a watershed and aridity mean that stream flow is less likely. Both elevation and slope can contribute to how much runoff there is in an area, ultimately impacting stream flow.
#Recipe
rec <- recipe(logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio,
data = camels_train) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_impute_median(all_numeric(), -all_outcomes())
rf_model <- rand_forest(mode = "regression", trees = 500, mtry = 3, min_n = 10) %>%
set_engine("ranger")
lm_model <- linear_reg() %>%
set_engine("lm")
xgb_model <- boost_tree(mode = "regression", trees = 1000, tree_depth = 6, learn_rate = 0.1, min_n = 10) %>%
set_engine("xgboost")
#Define the workflows for each model
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
workflow_lm <- workflow() %>%
add_model(lm_model) %>%
add_recipe(rec)
workflow_xgb <- workflow() %>%
add_model(xgb_model) %>%
add_recipe(rec)
models <- list(
"Random Forest" = rf_model,
"Linear Regression" = lm_model,
"XGBoost" = xgb_model)
recipes <- list(
"Standard" = rec)
workflow_set <- workflow_set(preproc = recipes,
models = models)
set.seed(123)
results <- workflow_set %>%
workflow_map(resamples = camels_cv,
seed = 123,
metrics = metric_set(rmse, rsq))
autoplot(results, metric = "rmse")
autoplot(results, metric = "rsq")
ranked_results <- rank_results(results)
print(ranked_results)
library(ggplot2)
#Build model
rf_model <- rand_forest(
mode = "regression",
trees = 500,
mtry = 3,
min_n = 10) %>%
set_engine("ranger")
#Define recipe
rec <- recipe(logQmean ~ p_mean + elev_mean + slope_mean + aridity + runoff_ratio,
data = camels_train) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_impute_median(all_numeric(), -all_outcomes())
#Build Workflow
workflow_rf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(rec)
#Fit model to training data
rf_fit <- fit(workflow_rf, data = camels_train)
#Make prediction on test data using augment
rf_predictions <- augment(rf_fit, new_data = camels_test)
#Plot observed vs predicted
ggplot(rf_predictions, aes(x = logQmean, y = .pred)) +
geom_point(color = "blue", alpha = 0.6) +  # Blue points for observed vs predicted
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Identity line
labs(
title = "Observed vs Predicted Streamflow (logQmean)",
x = "Observed Streamflow (logQmean)",
y = "Predicted Streamflow (logQmean)"
) +
theme_minimal() +
scale_color_viridis_c()
